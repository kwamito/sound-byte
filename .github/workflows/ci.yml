name: CI

# Enable Buildkit and let compose use it to speed up image building
# env:
#   DOCKER_BUILDKIT: 1
#   COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: ["master", "main"]
    paths-ignore: ["docs/**"]

  push:
    branches: ["master", "main"]
    paths-ignore: ["docs/**"]

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3.1.0

      - name: Set up Python 3.9
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9

      # Run all pre-commit hooks on all the files.
      # Getting only staged files can be tricky in case a new PR is opened
      # since the action is run on a branch in detached head state
      - name: Install and Run Pre-commit
        uses: pre-commit/action@v2.0.3

  pytest:
    runs-on: ubuntu-latest

    services:
      postgres: # needs a postgres docker image to run the tests
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        # health check container
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3.1.0

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-pip${{ hashFiles('**/requirements/local.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/local.txt

      - name: Run Tests
        env:
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: test
          DATABASE_URL: postgres://postgres:postgres@localhost/test

        run: |
          coverage run -m pytest
      - name: Report Coverage
        run: |
          coverage report

  deploy_to_google_cloud:
    needs: [linter, pytest]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.1.0

      - id: generate_environment_file
        env:
          ENVIRONMENT_VARIABLES: ${{ secrets.ENVIRONMENT_VARIABLES }}
        run: echo "$ENVIRONMENT_VARIABLES" > .env-for-app-yaml

      - id: prepare_app_yaml
        uses: mshick/fast-envsubst@v1
        with:
          env-file: .env-for-app-yaml
          in-file: app.yaml.template
          out-file: app.yaml

      - id: actual_deploy_to_gae
        uses: google-github-actions/deploy-appengine@v0.2.0
        with:
          deliverables: app.yaml
          project_id: ${{ secrets.GCP_PROJECT }}
          credentials: ${{ secrets.GCP_SA_KEY }}
          promote: false
